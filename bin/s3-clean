#!/usr/bin/env python
import os
import logging
import sys
import boto
import kaws.config
import kaws.s3
import kstdlib.logging.config
from boto import exception
from boto.s3.key import Key
from boto.s3.bucket import Bucket
from optparse import OptionParser

def clean(conn, options, args):
	bucket = kaws.s3.get_bucket(conn, options)
	keys = bucket.list(prefix=args[0])
	for key in keys:
		if key.size == 0:
			if options.verbose:
				print "%s/%s" % (options.bucket, args[0])
			key.delete()

def main():
	parser = optionParser()
	(options, args) = parser.parse_args()
	kstdlib.logging.config.configure_logging(options)

	try:
		creds = kaws.config.get_keys(options)
		bucket_name = kaws.s3.get_bucket_name(options)
		conn = kaws.s3.connect(
			creds, bucket_name=bucket_name, ordinary=options.ordinary)
		clean(conn, options, args)
	except boto.exception.BotoServerError, e:
		sys.stderr.write(e.message + "\n")
		sys.exit(1)

def optionParser():
	usage = "usage: %prog [options] [prefix]\n\n"
	usage += "Cleans out empty keys with the prefix"

	parser = OptionParser(usage=usage)
	kstdlib.logging.config.get_logging_options(parser)
	kaws.config.get_aws_options(parser)
	kaws.config.get_verbose_option(parser)
	kaws.s3.get_s3_options(parser)

	return parser

if __name__=='__main__':
	main()

# Local Variables:
# tab-width: 4
# indent-tabs-mode: t
# End:
