#!/usr/bin/env python
import os
import logging
import sys
import boto
import kaws.config
import kaws.s3
import kstdlib.logging.config
from boto import exception
from boto.s3.connection import S3Connection
from boto.s3.key import Key
from optparse import OptionParser

def dry_run(creds, options):
	sys.stderr.write("DRY RUN\n")
	bucket_name = kaws.s3.get_bucket_name(options)
	conn = kaws.s3.connect(
		creds, bucket_name=bucket_name, ordinary=options.ordinary)
	bucket = kaws.s3.get_bucket(conn, options)
	keys = bucket.list()
	for key in keys:
		print key.name
	print "bucket:%s" % bucket_name

def destroy_bucket(creds, options):
	threads = int(options.threads)
	if threads < 2:
		sys.stderr.write('Threads must be greater then 1\n')
		sys.exit(1)
	timeout = int(options.timeout)
	bucket_name = kaws.s3.get_bucket_name(options)
	kaws.s3.parallel_delete_bucket(creds, bucket_name,
		ordinary=options.ordinary, threads=threads,
		timeout=timeout, verbose=options.verbose)
	conn = kaws.s3.connect(
		creds, bucket_name=bucket_name, ordinary=options.ordinary)
	kaws.s3.delete_bucket(conn, bucket_name)
	print "bucket:%s" % bucket_name

def main():
	parser = optionParser()
	(options, args) = parser.parse_args()
	kstdlib.logging.config.configure_logging(options)

	try:
		creds = kaws.config.get_keys(options)
		if not options.force:
			dry_run(creds, options)
		else:
			destroy_bucket(creds, options)
	except boto.exception.BotoServerError, e:
		sys.stderr.write(str(e))
		sys.exit(1)

def optionParser():
	usage = "usage: %prog [options] [key]\n\n"
	usage += "Deletes all keys in a bucket and then the bucket.\n"
	usage += "Does a dry run unless you use -f"

	parser = OptionParser(usage=usage)
	kstdlib.logging.config.get_logging_options(parser)
	kaws.config.get_aws_options(parser, rw=True)
	kaws.config.get_verbose_option(parser)
	kaws.s3.get_s3_options(parser)
	parser.add_option(
		"-t", "--threads", default="10", dest="threads",
		help="Threads (default: 10)")
	parser.add_option(
		"-T", "--timeout", default="300", dest="timeout",
		help="Key copy timeout (default: 300)")
	parser.add_option(
		"-f", "--force", dest="force", action="store_true", default=False,
		help="Force")

	return parser

if __name__=='__main__':
	main()

# Local Variables:
# tab-width: 4
# indent-tabs-mode: t
# End:
